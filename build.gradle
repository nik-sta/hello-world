plugins {
    id "idea"
    id "application"
    id "maven-publish"

    id 'org.jetbrains.kotlin.jvm' version '1.7.0'
    id "org.jetbrains.kotlin.plugin.spring" version "1.7.0"

    id "org.springframework.boot" version "2.7.0"
    id "io.spring.dependency-management" version "1.0.11.RELEASE"

    id "com.palantir.docker" version "0.33.0"
}

group = "io.botscripter"
version = "1.0.0"

application {
    mainClassName = "io.botscripter.helloworld.HelloWorldApplication"
}

bootJar {
    archiveFileName = "hello-world.jar"
}

jar {
    enabled = false
}

springBoot {
    buildInfo()
}

repositories {
    mavenCentral()
    maven {
        url = uri("https://maven.pkg.github.com/botscripter/*")
        credentials {
            username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_ACTOR")
            password = project.findProperty("gpr.token") ?: System.getenv("GITHUB_TOKEN")
        }
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib"

    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation "org.springframework.boot:spring-boot-starter-actuator"

    testImplementation "org.springframework.boot:spring-boot-starter-test"

    developmentOnly "org.springframework.boot:spring-boot-devtools"
}

tasks.named("test") {
    useJUnitPlatform()
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "17"
    }
}

docker {
    dependsOn bootJar
    name "${project.group}/${rootProject.name}:${version}"
    dockerfile file("docker/Dockerfile")
    files bootJar.archivePath, 'docker/run_application.sh'
    buildArgs([JAR_FILE: "${jar.archiveFileName}"])
    pull true
    noCache true
}

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/botscripter/hello-world")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_ACTOR")
                password = project.findProperty("gpr.token") ?: System.getenv("GITHUB_TOKEN")
            }
        }
    }

    publications {
        mavenJava(MavenPublication) {
            from components.java

            pom {
                groupId = 'io.botscripter'
                name = 'hello-world'
                description = 'Plain Kotlin hello-world application with Spring Boot.'
                url = 'https://github.com/botscripter/hello-world'
                packaging = 'jar'

                scm {
                    url = 'https://github.com/botscripter/hello-world'
                    connection = 'scm:git://github.com/botscripter/hello-world.git'
                    developerConnection = 'scm:git://github.com/botscripter/hello-world.git'
                }

                developers {
                    developer {
                        id = 'botscripter'
                        name = 'Nikola Stankovic'
                        email = 'this@botscripter.io'
                        organizationUrl = 'https://botscripter.io/'
                    }
                }
            }
        }
    }
}